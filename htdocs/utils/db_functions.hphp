<?php
/**
 * Created by PhpStorm.
 * User: dario
 * Date: 31/01/18
 * Time: 15.19
 */

class MySqliWrapper extends mysqli
{
    private $db = DBMS_DB_NAME;
    private $server_name = DBMS_SERVER;
    private $user = DBMS_USER;
    private $password = DBMS_PASS;

    /**
     * MySqliWrapper constructor.
     * @param string $db
     * @param string $server
     * @param string $user
     * @param string $password
     */
    public function __construct(string $db = NULL,string $server = NULL,string $user = NULL,string $password = NULL)
    {
        if($db !== NULL)
            $this->db = $db;

        if($server !== NULL)
            $this->server_name = $server;

        if($user !== NULL)
            $this->user = $user;

        if($password !== NULL)
            $this->password = $password;

        parent::__construct($this->server_name, $this->user, $this->password, $this->db);
        parent::set_charset("utf8");
    }

    public function prepare($query): MySqliStmWrapper
    {
        return new MySqliStmWrapper($this, $query);
    }

    /**
     * This function returns all possible values of an enum into an array
     * @author https://stackoverflow.com/a/11429272
     * @param string $table
     * @param string $field
     * @return array
     * @throws mysqli_sql_exception
     */
    public function enum_values(string $table, string $field): array
    {
        $result = $this->query( "SHOW COLUMNS FROM {$table} WHERE Field = '{$field}'" );
        if($result === FALSE)
            throw new mysqli_sql_exception($this->error_list);

        $type = $result->fetch_assoc()["Type"];

        preg_match("/^enum\(\'(.*)\'\)$/", $type, $matches);
        $enum = explode("','", $matches[1]);
        return $enum;
    }
}

class MySqliStmWrapper extends mysqli_stmt
{
    /**
     * MySqliStmWrapper constructor.
     * @param MySqliWrapper $link
     * @param string $query
     */
    public function __construct(mysqli $link, string $query)
    {
        parent::__construct($link, $query);
    }

    /**
     * @param bool $redirect_on_error
     * @return bool
     */
    public function execute(bool $redirect_on_error = false)
    {
        $success = parent::execute();

        if(!$success && $redirect_on_error)
        {
            $errore = [
                "name" => "Errore interrogazione DB",
                "code" => $this->errno,
                "what" => json_encode($this->error_list, JSON_PRETTY_PRINT)
            ];

            // TODO Non funzioner√† in HTTPS. Risolvere
            header("Location: http://".$_SERVER['HTTP_HOST']. BASE_DIR . "/error.php?error=".urlencode(json_encode($errore)));
            //die("Errore fatale");
        }

        return $success;
    }


}